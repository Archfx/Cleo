#!/usr/bin/env python3

import csv
import numpy as np
import sys

def read_csv(file_path):
    data = []
    with open(file_path, 'r') as file:
        reader = csv.DictReader(file)
        for row in reader:
            data.append(row)
    return data

def calculate_correlation(data, X_column_title, Y_column_title):
    # Extract data from the specified columns
    X_data = np.array([float(row[X_column_title]) for row in data])
    Y_data = np.array([float(row[Y_column_title]) for row in data])

    # Scale the distributions (z-score normalization)
    X_data = (X_data - np.mean(X_data)) / np.std(X_data)
    Y_data = (Y_data - np.mean(Y_data)) / np.std(Y_data)

    # Calculate mean and standard deviation
    mean_X, std_X = np.mean(X_data), np.std(X_data)
    mean_Y, std_Y = np.mean(Y_data), np.std(Y_data)

    # Calculate Pearson correlation coefficient
    correlation = np.corrcoef(X_data, Y_data)[0, 1]

    print("Mean of {}: {}".format(X_column_title, mean_X))
    print("Standard Deviation of {}: {}".format(X_column_title, std_X))
    print("Mean of {}: {}".format(Y_column_title, mean_Y))
    print("Standard Deviation of {}: {}".format(Y_column_title, std_Y))
    print("Pearson Correlation Coefficient between {} and {}: {}".format(X_column_title, Y_column_title, correlation))

if __name__ == "__main__":
    # Check if the correct number of command-line arguments is provided
    if len(sys.argv) != 4:
        print("Usage: stats <file_path> <X_column_title> <Y_column_title>")
        sys.exit(1)

    file_path = sys.argv[1]
    X_column_title = sys.argv[2]
    Y_column_title = sys.argv[3]

    data = read_csv(file_path)
    calculate_correlation(data, X_column_title, Y_column_title)